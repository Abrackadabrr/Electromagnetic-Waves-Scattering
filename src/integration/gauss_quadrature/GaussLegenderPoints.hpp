//
// Created by evgen on 31.01.24.
//

#ifndef ELECTROMAGNETIC_WAVES_SCATTERING_GAUSSLEGENDERPOINTS_HPP
#define ELECTROMAGNETIC_WAVES_SCATTERING_GAUSSLEGENDERPOINTS_HPP

#include "types/Types.hpp"

namespace EMW::DefiniteIntegrals {

template <Types::index dim>
struct Node {
    Containers::array<Types::scalar, dim> point;
    Types::scalar weight;
};

template <typename... Quadratures, Types::index... Is>
constexpr Node<sizeof...(Quadratures)> getPoint(Containers::array<Types::index, sizeof...(Quadratures)> counter,
                                                std::index_sequence<Is...>) {
    return {Containers::array<Types::scalar, sizeof...(Quadratures)>{Quadratures::nodes[counter[Is]].point[0]...},
            (... * Quadratures::nodes[counter[Is]].weight)};
}

/**
 * Декартово произведение одномерных разбиений и тензорное произведение весов
 * @tparam Quadratures одномерные разбиения
 * @return
 */
template <typename... Quadratures>
constexpr Containers::array<Node<sizeof...(Quadratures)>, (... * Quadratures::size)> cartesian_product() {
    static_assert((... * Quadratures::dim) == 1);

    constexpr Types::index size = (... * Quadratures::size);
    Containers::array<Types::index, sizeof...(Quadratures)> dimentions = {Quadratures::size...};

    Containers::array<Node<dimentions.size()>, size> products{};
    auto counter = Containers::array<Types::index, dimentions.size()>{};  // массив нулей

    for (auto &product : products) {
        product = getPoint<Quadratures...>(counter, std::make_index_sequence<dimentions.size()>());
        ++(counter.front());
        for (Types::index i = 0; i != dimentions.size() - 1; i++) {
            if (counter[i] == dimentions[i]) {
                counter[i] = 0;
                counter[i + 1]++;
            } else
                break;
        }
    }
    return products;
}

template <Types::index... N>
struct Quadrature {
    static constexpr Types::index dim = sizeof...(N);
    static constexpr Types::index size = (... * N);
    static constexpr Containers::array<Node<dim>, size> nodes = cartesian_product<Quadrature<N>...>();
};

// Специализации под одномерные разбиения, рассчитанные с помощью строковой арифметики

template <>
struct Quadrature<1> {
    static constexpr Types::index dim = 1;
    static constexpr Types::index size = 1;
    static constexpr Containers::array<Node<1>, size> nodes = {Node<1>{{0}, 2.}};
};

template <>
struct Quadrature<2> {
    static constexpr Types::index dim = 1;
    static constexpr Types::index size = 2;
    static constexpr Containers::array<Node<1>, size> nodes = {
            Node<1>{
                    {-0.577350269189625764509148780501957455647601751270126876018602326483977672302933345693715395585749525225208713805135567677},
                    1.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001},
            Node<1>{
                    {0.577350269189625764509148780501957455647601751270126876018602326483977672302933345693715395585749525225208713805135567678},
                    1.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001},
    };
};

template <>
struct Quadrature<3> {
    static constexpr Types::index dim = 1;
    static constexpr Types::index size = 3;
    static constexpr Containers::array<Node<1>, size> nodes = {
            Node<1>{
                    {-0.774596669241483377035853079956479922166584341058318165317514753222696618387395806703857475371734703583260441372189929403},
                    0.555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555554},
            Node<1>{
                    {0},
                    0.888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888889},
            Node<1>{
                    {0.774596669241483377035853079956479922166584341058318165317514753222696618387395806703857475371734703583260441372189929403},
                    0.555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555554},
    };
};

template <>
struct Quadrature<4> {
    static constexpr Types::index dim = 1;
    static constexpr Types::index size = 4;
    static constexpr Containers::array<Node<1>, size> nodes = {
            Node<1>{
                    {-0.861136311594052575223946488892809505095725379629717637615721920906529471495048865704162339884479305210576920931978176325},
                    0.347854845137453857373063949221999407235348695833893540492529319518751867465910351721983767732258159509798103904763502157},
            Node<1>{
                    {-0.339981043584856264802665759103244687200575869770914352592953976821020030463237034477875280435554811548960239520746493215},
                    0.652145154862546142626936050778000592764651304166106459507470680481248132534089648278016232267741840490201896095236497841},
            Node<1>{
                    {0.339981043584856264802665759103244687200575869770914352592953976821020030463237034477875280435554811548960239520746493213},
                    0.652145154862546142626936050778000592764651304166106459507470680481248132534089648278016232267741840490201896095236497841},
            Node<1>{
                    {0.861136311594052575223946488892809505095725379629717637615721920906529471495048865704162339884479305210576920931978176325},
                    0.347854845137453857373063949221999407235348695833893540492529319518751867465910351721983767732258159509798103904763502157},
    };
};

template <>
struct Quadrature<5> {
    static constexpr Types::index dim = 1;
    static constexpr Types::index size = 5;
    static constexpr Containers::array<Node<1>, size> nodes = {
            Node<1>{
                    {-0.906179845938663992797626878299392965125651910762530862873762286543770794916686846941142989553542261911583624816705116093},
                    0.236926885056189087514264040719917362643260002212414015582827888221717288403043098579993430493951444776109134608143325577},
            Node<1>{
                    {-0.538469310105683091036314420700208804967286606905559956202231627059471185367755291035803667250570931571367057232104349552},
                    0.478628670499366468041291514835638192912295553343141539972727667333838267152512456975562125061604110779446420947412229970},
            Node<1>{
                    {0},
                    0.568888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888889},
            Node<1>{
                    {0.538469310105683091036314420700208804967286606905559956202231627059471185367755291035803667250570931571367057232104349550},
                    0.478628670499366468041291514835638192912295553343141539972727667333838267152512456975562125061604110779446420947412229970},
            Node<1>{
                    {0.906179845938663992797626878299392965125651910762530862873762286543770794916686846941142989553542261911583624816705116094},
                    0.236926885056189087514264040719917362643260002212414015582827888221717288403043098579993430493951444776109134608143325579},

    };
};

template <>
struct Quadrature<6> {
    static constexpr Types::index dim = 1;
    static constexpr Types::index size = 6;
    static constexpr Containers::array<Node<1>, size> nodes = {
            Node<1>{
                    {-0.932469514203152027812301554493994609134765737712289824872549616526613500844200196276288739921925985047863679726572834109},
                    0.171324492379170345040296142172732893526822501484043982398635439798945760542340154647927705426388669752116522069874404296},
            Node<1>{
                    {-0.661209386466264513661399595019905347006448564395170070814526705852183496607143100944286403746461456429888371639275146679},
                    0.360761573048138607569833513837716111661521892746745482289739240237140037837261718320962201988819347943117209140370798601},
            Node<1>{
                    {-0.238619186083196908630501721680711935418610630140021350181395164574274934275639842249224427257349131609072223097010687203},
                    0.467913934572691047389870343989550994811655605769210535311625319963914201620398127031110092584791982304766268789754797101},
            Node<1>{
                    {0.238619186083196908630501721680711935418610630140021350181395164574274934275639842249224427257349131609072223097010687203},
                    0.467913934572691047389870343989550994811655605769210535311625319963914201620398127031110092584791982304766268789754797101},
            Node<1>{
                    {0.661209386466264513661399595019905347006448564395170070814526705852183496607143100944286403746461456429888371639275146681},
                    0.360761573048138607569833513837716111661521892746745482289739240237140037837261718320962201988819347943117209140370798587},
            Node<1>{
                    {0.932469514203152027812301554493994609134765737712289824872549616526613500844200196276288739921925985047863679726572834104},
                    0.171324492379170345040296142172732893526822501484043982398635439798945760542340154647927705426388669752116522069874404324},
    };
};

template <>
struct Quadrature<7> {
    static constexpr Types::index dim = 1;
    static constexpr Types::index size = 7;
    static constexpr Containers::array<Node<1>, size> nodes = {
            Node<1>{
                    {-0.949107912342758524526189684047851262400770937670617783548769103913063330354840140805730770027925724144300739666995216195},
                    0.129484966168869693270611432679082018328587402259946663977208638724655234972042308715625418162920845089484402001634427882},
            Node<1>{
                    {-0.741531185599394439863864773280788407074147647141390260119955351967429874672180513792826832366863247059692518093112014235},
                    0.279705391489276667901467771423779582486925065226598764537014032693618810430562676813240942901197618766323375213372051528},
            Node<1>{
                    {-0.405845151377397166906606412076961463347382014099370126387043251794663813226125655328312689727746587765286758666048018677},
                    0.381830050505118944950369775488975133878365083533862734751083451030705546434129708348684659344044801450314671764585357344},
            Node<1>{
                    {0E-166},
                    0.417959183673469387755102040816326530612244897959183673469387755102040816326530612244897959183673469387755102040816326531},
            Node<1>{
                    {0.405845151377397166906606412076961463347382014099370126387043251794663813226125655328312689727746587765286758666048018677},
                    0.381830050505118944950369775488975133878365083533862734751083451030705546434129708348684659344044801450314671764585357344},
            Node<1>{
                    {0.741531185599394439863864773280788407074147647141390260119955351967429874672180513792826832366863247059692518093112014238},
                    0.279705391489276667901467771423779582486925065226598764537014032693618810430562676813240942901197618766323375213372051504},
            Node<1>{
                    {0.949107912342758524526189684047851262400770937670617783548769103913063330354840140805730770027925724144300739666995216193},
                    0.129484966168869693270611432679082018328587402259946663977208638724655234972042308715625418162920845089484402001634427881},
    };
};

template <>
struct Quadrature<8> {
    static constexpr Types::index dim = 1;
    static constexpr Types::index size = 8;
    static constexpr Containers::array<Node<1>, size> nodes = {
            Node<1>{
                    {-0.960289856497536231683560868569472990428235234301452038271639777372424897743419284439438959263312268310424392817294176211},
                    0.101228536290376259152531354309962190115394091051684957059003698064740178763470784860282739304045006558154389331413266699},
            Node<1>{
                    {-0.796666477413626739591553936475830436837171731615964832070170295039217305676473092147151927295725939019197453453097309265},
                    0.222381034453374470544355994426240884430130870051249564725909289293616814570449040853653142377197927842159266101212218151},
            Node<1>{
                    {-0.525532409916328985817739049189246349041964243120392857750857099272454820768561272523961400193631982061909682924825260850},
                    0.313706645877887287337962201986601313260328999002734937690263945074956271942173496961698076233928556049427574641077808646},
            Node<1>{
                    {-0.183434642495649804939476142360183980666757812912973782317188473699204474221542114116068223711123353745267658764286766609},
                    0.362683783378361982965150449277195612194146039894330540524823067566686734723906677324366042084828509550258769926296706551},
            Node<1>{
                    {0.183434642495649804939476142360183980666757812912973782317188473699204474221542114116068223711123353745267658764286766609},
                    0.362683783378361982965150449277195612194146039894330540524823067566686734723906677324366042084828509550258769926296706551},
            Node<1>{
                    {0.525532409916328985817739049189246349041964243120392857750857099272454820768561272523961400193631982061909682924825260851},
                    0.313706645877887287337962201986601313260328999002734937690263945074956271942173496961698076233928556049427574641077808629},
            Node<1>{
                    {0.796666477413626739591553936475830436837171731615964832070170295039217305676473092147151927295725939019197453453097309284},
                    0.222381034453374470544355994426240884430130870051249564725909289293616814570449040853653142377197927842159266101212218065},
            Node<1>{
                    {0.960289856497536231683560868569472990428235234301452038271639777372424897743419284439438959263312268310424392817294176209},
                    0.101228536290376259152531354309962190115394091051684957059003698064740178763470784860282739304045006558154389331413266722},
    };
};
}

#endif //ELECTROMAGNETIC_WAVES_SCATTERING_GAUSSLEGENDERPOINTS_HPP
